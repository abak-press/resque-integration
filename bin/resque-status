#!/usr/bin/env ruby

require 'optparse'
require 'redis'
require 'resque'
require 'active_support/core_ext/hash/slice'
require 'active_support/time'

options = {}

opt_parser = OptionParser.new do |opt|
  opt.banner = 'Usage: resque-status [OPTIONS]'
  opt.separator ''
  opt.separator 'Resque Status Tool'
  opt.separator ''

  opt.separator 'Options:'

  opt.on('-k', '--key [KEY]', 'resque info key, default pending') do |value|
    options[:key] = value
  end

  opt.on('-h', '--host HOST', 'redis host') do |value|
    options[:host] = value
  end

  opt.on('-p', '--port PORT', 'redis port') do |value|
    options[:port] = value
  end

  opt.on('-n', '--namespace NAMESPACE', 'redis namespace') do |value|
    options[:namespace] = value
  end

  opt.on('--help', 'help') do
    puts opt_parser
    exit
  end
end

opt_parser.parse!

Resque.redis = Redis.new(options.slice(:host, :port))
Resque.redis.namespace = options.fetch(:namespace)

info = Resque.info
key = options.fetch(:key, :pending).to_sym

if info.key?(key)
  puts info[key]
elsif key == :oldest
  # oldest job work time in seconds
  workers = Resque.workers
  jobs = workers.map(&:job)
  worker_jobs = workers.zip(jobs).reject { |w, j| w.idle? || j['queue'].nil? }
  oldest_worker_job =
    worker_jobs
      .map { |_, job| [job, (Time.now.utc - DateTime.strptime(job['run_at'] ,'%Y-%m-%dT%H:%M:%S').utc).to_i] }
      .sort_by(&:last)
      .last
  puts oldest_worker_job.present? ? [oldest_worker_job.last, oldest_worker_job.first['queue']].join("\t") : 'null'
else
  $stderr.puts "Unknown key. Should be one of the [#{info.keys.join(', ')}]"
end
